_bbd‍.x([["default",()=>Game]]);   class Game {
    constructor(size) {
        this.size = size;
        this.setupNewGame(this.size)
     }

    setupNewGame(size) {
        this.gameState = {
            board: this.newGame(),
            score:0,
            won:false,
            over:false,
        }
    }
    newGame() {
        this.movecallbacks = []
        this.wincallbacks = []
        this.losecallbacks = []
        let grid = []
        let mgrid = []
        for(let i = 0; i < this.size; i++) {
            var row = []
            var rows = []
            for(let j = 0; j < this.size; j++) {
                row.push(0)
                rows.push(0)
            }

            grid.push(row)
            mgrid.push(rows)
        }
        this.mgrid = mgrid
        this.grid = grid
        this.addNum()
        this.addNum()
        return this.convert()

    }

    convert() {
      let board = []
      for(let i = 0; i < this.size; i++) {
        for(let j = 0; j < this.size; j++) {
          board.push(this.grid[i][j])
        }
      }
      return board
    }

    revconvert() {
      let int = 0
      for(let i = 0; i < this.size; i++) {
        for(let j = 0; j < this.size; j++) {
          this.grid[i][j] = this.gameState.board[int]
          int = int +1
        }
      }
    }
 
    loadGame(gameState) {
        this.gameState = gameState 
        this.revconvert() 
    }

    blankGrid() {
        let gr = []
        for(let i = 0; i < this.size; i++) {
            var row = []
            for(let j = 0; j < this.size; j++) {
                row.push(0)
            }
            gr.push(row)
        }
        return gr
    }
    
    move(direction) {
        this.gameState.board = this.convert()
        let flipped = false
        let rotated = false
        let played = true
        if(direction == 'right') {

        }else if (direction == 'left') {
            this.grid = this.flipGrid(this.grid)
            flipped = true
        }else if (direction == 'down') {
            this.grid = this.transposeGrid(this.grid)
            rotated = true
        }else if (direction == 'up'){
            this.grid = this.transposeGrid(this.grid)
            this.grid = this.flipGrid(this.grid)
            rotated = true
            flipped = true
        } else {
            played = false
        }   
        if (played) {
            this.gameState.board = this.convert()
            let past = this.copyGrid(this.grid);
            for (let i = 0; i < this.size; i++) {
              this.grid[i] = this.operate(this.grid[i]);
            }
            let changed = this.compare(past, this.grid);
            if (flipped) {
              this.grid = this.flipGrid(this.grid);
            }
            if (rotated) {
              this.grid = this.transposeGrid(this.grid);
            }
            if (changed) {
              this.addNum();
              
            }   
            for(let i = 0; i < this.movecallbacks.length; i++) {
              this.movecallbacks[i](this.gameState)
            }
            let gameover = this.isGameOver();
            if (gameover) {
              this.gameState.over = true
              for(let i = 0; i < this.losecallbacks.length; i++) {
                this.losecallbacks[i](this.gameState)
              }
            }
        
            let gamewon = this.isGameWon();
            if (gamewon) {
              this.gameState.won = true
              for(let i = 0; i < this.wincallbacks.length; i++) {
                this.wincallbacks[i](this.gameState)
              }
            }
          }
          this.gameState.board = this.convert()
    }

        
    compare(a, b) {
        for (let i = 0; i < this.size; i++) {
          for (let j = 0; j < this.size; j++) {
            if (a[i][j] !== b[i][j]) {
              return true;
            }
          }
        }
        return false;
      }
    
      



    copyGrid(grid) {
        let extra = this.blankGrid();
        for (let i = 0; i < this.size; i++) {
          for (let j = 0; j < this.size; j++) {
            extra[i][j] = grid[i][j];
          }
        }
        return extra;
      }
      
    flipGrid(grid) {
        for (let i = 0; i < this.size; i++) {
          grid[i].reverse();
        }
        return grid;
      }
      
    transposeGrid(grid) {
        let newGrid = this.blankGrid();
        for (let i = 0; i < this.size; i++) {
          for (let j = 0; j < this.size; j++) {
            newGrid[i][j] = grid[j][i];
          }
        }
        return newGrid;
      }

    operate(row) {
        row = this.slide(row);
        row = this.combine(row);
        row = this.slide(row);
        return row;
      }
      
    slide(row) {
        let arr = row.filter(val => val);
        let missing = this.size - arr.length;
        let zeros = Array(missing).fill(0);
        arr = zeros.concat(arr);
        return arr;
      }
      
    combine(row) {
        for (let i = this.size -1; i >= 1; i--) {
          let a = row[i];
          let b = row[i - 1];
          if (a == b) {
            row[i] = a + b;
            this.gameState.score += row[i];
            row[i - 1] = 0;
          }
        }
        return row;
      }
      
    isGameWon() {
        for (let i = 0; i < this.size; i++) {
          for (let j = 0; j < this.size; j++) {
            if (this.grid[i][j] == 2048) {
              return true;
            }
          }
        }
        return false;
      }
    getSize() {
      return this.size
    }
      
      
    isGameOver() {
        for (let i = 0; i < this.size; i++) {
          for (let j = 0; j < this.size; j++) {
            if (this.grid[i][j] == 0) {
              return false;
            }
            if (i !== this.size-1 && this.grid[i][j] === this.grid[i + 1][j]) {
              return false;
            }
            if (j !== this.size-1 && this.grid[i][j] === this.grid[i][j + 1]) {
              return false;
            }
          }
        }
        return true;
      }

    toString() {
        return this.gameState.board.toString()
    }

    onMove(callback) {
      this.movecallbacks.push(callback)
    }

    onWin(callback){
      this.wincallbacks.push(callback)
    }

    onLose(callback){
      this.losecallbacks.push(callback)
    }

    getGameState() {
      this.gameState.board = this.convert()
      return this.gameState
    }

    addNum() {
        let options = []
        for(let i = 0;i < this.size; i++) {
            for(let j = 0;j < this.size; j++){
                if(this.grid[i][j]=== 0){
                    options.push({
                    x:i,
                    y:j  
                    });
                }
            }
        }

        if(options.length > 0){
            let spot = options[Math.floor(Math.random() * options.length)]
            let r = Math.random()
            this.grid[spot.x][spot.y] = r > .9 ? 4:2   
        }
    }
 } 




















 